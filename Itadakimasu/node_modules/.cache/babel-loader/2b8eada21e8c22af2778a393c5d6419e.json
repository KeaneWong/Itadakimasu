{"ast":null,"code":"import _slicedToArray from\"/Users/keanewong/Desktop/Itadakimasu-Server/Itadakimasu/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from'react';import'./style.css';import Card from'../UI/Card';import Bepis from'../../blogPostImages/TacosBarbacoa.jpg';import blogPost from'../../Data/blog.json';import ReactMarkdown from'react-markdown';import marked from\"marked\";import Loader from'react-loader-spinner';/**\n* @author\n* @function BlogPost\n**/import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var BlogPost=function BlogPost(props){var _useState=useState({post_id:\"\",description:\"\",title:\"\",date:\"\",author:\"\",tags:\"\",text:\"\",image:\"\"}),_useState2=_slicedToArray(_useState,2),post=_useState2[0],setPost=_useState2[1];//these two variables are to be used in the program, while the corresponding functions are used in usestate and useeffect\nvar _useState3=useState(\"\"),_useState4=_slicedToArray(_useState3,2),postId=_useState4[0],setPostId=_useState4[1];var _useState5=useState(),_useState6=_slicedToArray(_useState5,2),postText=_useState6[0],setPostText=_useState6[1];var _useState7=useState(),_useState8=_slicedToArray(_useState7,2),postImage=_useState8[0],setPostImage=_useState8[1];var _useState9=useState(false),_useState10=_slicedToArray(_useState9,2),imgLoaded=_useState10[0],setImgLoaded=_useState10[1];useEffect(function(){//this gets the metadata for post\nfunction GetMetadata(){var PostId=props.match.params.postId;//props.match.params.postId is the /urltag that we add to the url after 'itadakimasu.me/post'\n//match.params is the parts of the url that are dynamic i.e changing (denoted with a ':' in app.js as 'postId' for this website)\n//this was passed to us as a prop by the parent, app.js\n//const post = blogPost.data.find(post=>post.id==postId);\nvar url=\"/posts/\".concat(PostId);console.log(url);fetch(url).then(function(response){return response.json();}).then(function(json){console.log('parsed json',json[0]);// access json.body here\nsetPost(json[0]);setPostId(PostId);return json;}).then(function(json){var textUrl=\"/postText/\".concat(json[0].text);console.log(textUrl);fetch(textUrl).then(function(res){return res.text();}).then(function(result){//console.log(result);\nsetPostText(result);}).catch(function(error){console.log(error);});var imgUrl=\"/postText/\".concat(json[0].image);console.log(imgUrl);fetch(imgUrl).then(function(res){return res.blob();}).then(function(result){console.log(result);var imageObjectURL=URL.createObjectURL(result);setPostImage(imageObjectURL);setImgLoaded(true);}).catch(function(error){console.log(error);});//console.log(`ImgURL: ${imgUrl}`);\n});};GetMetadata();/* function WaitOnMetadata() {\n            return Promise.all([GetMetadata()]);\n\n        };\n\n        WaitOnMetadata()\n        .then(([json]) => {\n            console.log(\"Step 2:\",json);\n            const textUrl = `http://localhost:5000/postText/${post.text}`;\n            fetch({textUrl})\n            .then((res) => res.json())\n            .then((result) => {\n                setPostText({result });\n            })\n        \n            console.log(`TextURL: ${textUrl}`);\n\n\n            const imgUrl = `http://localhost:5000/postText/${post.image}`;\n            fetch({imgUrl})\n            .then((res) => res.json())\n            .then((result) => {\n                setPostImage({result});\n            })\n            console.log(`ImgURL: ${imgUrl}`);\n            \n        })*/},[]);//tells the useeffect to do its thing when post or the dynamic part of the url is updated\n/*\n        const fetchData = async() =>{\n            try {\n              const response = await fetch(url);\n              const jsonPost = await response.json();\n              //console.log(\"Yo what is up my goo\", json);\n              setPost(jsonPost);      //on update to post or url, we set the current displayed post to be the post we found using the postid we got from the dynamic url\n              console.log(jsonPost);\n              setPostId(PostId);  //on update, we rewrite the postId value to be used later in the program.\n\n            }\n            catch(error){\n              console.log(\"Error: \", error);\n            }\n        }\n        fetch(url)\n        .then(response => response.json())\n        .then(json => {\n            console.log('parsed json', json) // access json.body here\n            setPost(json[0]);\n            setPostId(PostId);\n        })\n    */ //if(post.blogImage == \"\") return null;//should fix the require function ./undefined error but didnt\n//console.log(post);\nreturn/*#__PURE__*/ (//NOTICE: Replace the src = {} with a src = {require()}. Might cause problems while bundling. Still unresolved\n_jsx(\"div\",{className:\"blogPostContainer\",children:/*#__PURE__*/_jsxs(Card,{children:[/*#__PURE__*/_jsx(\"div\",{className:\"postImageContainer\",children:/*#__PURE__*/_jsx(\"img\",{src:postImage,alt:\"Post Image\"})}),/*#__PURE__*/_jsxs(\"div\",{className:\"blogHeader\",children:[/*#__PURE__*/_jsx(\"h1\",{className:\"postTitle\",children:post.title}),/*#__PURE__*/_jsx(\"em\",{className:\"postDescription\",children:post.description}),/*#__PURE__*/_jsxs(\"span\",{className:\"postedBy\",children:[\"posted on \",post.date,\" by \",post.author]})]}),/*#__PURE__*/_jsx(\"div\",{className:\"postContent\",children:/*#__PURE__*/_jsx(ReactMarkdown,{children:postText})})]})}));};export default BlogPost;","map":{"version":3,"sources":["/Users/keanewong/Desktop/Itadakimasu-Server/Itadakimasu/src/Components/BlogPost/index.js"],"names":["React","useState","useEffect","Card","Bepis","blogPost","ReactMarkdown","marked","Loader","BlogPost","props","post_id","description","title","date","author","tags","text","image","post","setPost","postId","setPostId","postText","setPostText","postImage","setPostImage","imgLoaded","setImgLoaded","GetMetadata","PostId","match","params","url","console","log","fetch","then","response","json","textUrl","res","result","catch","error","imgUrl","blob","imageObjectURL","URL","createObjectURL"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react'\nimport './style.css'\nimport Card from '../UI/Card'\nimport Bepis from '../../blogPostImages/TacosBarbacoa.jpg'\nimport blogPost from '../../Data/blog.json'\nimport ReactMarkdown from 'react-markdown'\nimport marked from \"marked\";\nimport Loader from 'react-loader-spinner'\n/**\n* @author\n* @function BlogPost\n**/\n\n\n\nconst BlogPost = (props) => {\n\n\n\n\n    const[post, setPost] = useState({\n        post_id:\"\",\n        description:\"\",\n        title: \"\",\n        date: \"\",\n        author: \"\",\n        tags:\"\",\n        text: \"\",\n        image: \"\"\n    });//these two variables are to be used in the program, while the corresponding functions are used in usestate and useeffect\n    const[postId,setPostId] = useState(\"\");\n\n    const[postText,setPostText] = useState();\n    const[postImage,setPostImage] = useState();\n    const[imgLoaded,setImgLoaded] = useState(false);\n\n    \n    useEffect(() =>\n    {\n        //this gets the metadata for post\n        function GetMetadata(){\n            const PostId = props.match.params.postId;   //props.match.params.postId is the /urltag that we add to the url after 'itadakimasu.me/post'\n                                                        //match.params is the parts of the url that are dynamic i.e changing (denoted with a ':' in app.js as 'postId' for this website)\n                                                        //this was passed to us as a prop by the parent, app.js\n            //const post = blogPost.data.find(post=>post.id==postId);\n            const url = `/posts/${PostId}`;\n            console.log(url);\n            fetch(url)\n            .then(response => response.json())\n            .then(json => {\n                console.log('parsed json', json[0]) // access json.body here\n                setPost(json[0]);\n                setPostId(PostId);\n                return json;\n            })\n            .then((json) =>{\n                const textUrl = `/postText/${json[0].text}`;\n                console.log(textUrl);\n                fetch(textUrl)\n                .then(res=>{\n                    return res.text();\n                })\n                .then((result) => {\n                    //console.log(result);\n                    setPostText(result);\n                })\n                .catch((error) => {\n                    console.log( error );\n                });\n\n                const imgUrl = `/postText/${json[0].image}`;\n                console.log(imgUrl);\n                fetch(imgUrl)\n                .then((res) => res.blob())\n                .then((result) => {\n                    console.log(result);\n                    const imageObjectURL = URL.createObjectURL(result);\n\n                    setPostImage(imageObjectURL);\n                    setImgLoaded(true);\n                })\n                .catch((error) => {\n                    console.log( error );\n                })\n                //console.log(`ImgURL: ${imgUrl}`);\n            })\n            \n        };\n        GetMetadata();\n\n       /* function WaitOnMetadata() {\n            return Promise.all([GetMetadata()]);\n\n        };\n\n        WaitOnMetadata()\n        .then(([json]) => {\n            console.log(\"Step 2:\",json);\n            const textUrl = `http://localhost:5000/postText/${post.text}`;\n            fetch({textUrl})\n            .then((res) => res.json())\n            .then((result) => {\n                setPostText({result });\n            })\n        \n            console.log(`TextURL: ${textUrl}`);\n\n\n            const imgUrl = `http://localhost:5000/postText/${post.image}`;\n            fetch({imgUrl})\n            .then((res) => res.json())\n            .then((result) => {\n                setPostImage({result});\n            })\n            console.log(`ImgURL: ${imgUrl}`);\n            \n        })*/\n\n\n\n\n        \n       \n        \n\n    }, []);//tells the useeffect to do its thing when post or the dynamic part of the url is updated\n   \n\n\n    /*\n        const fetchData = async() =>{\n            try {\n              const response = await fetch(url);\n              const jsonPost = await response.json();\n              //console.log(\"Yo what is up my goo\", json);\n              setPost(jsonPost);      //on update to post or url, we set the current displayed post to be the post we found using the postid we got from the dynamic url\n              console.log(jsonPost);\n              setPostId(PostId);  //on update, we rewrite the postId value to be used later in the program.\n\n            }\n            catch(error){\n              console.log(\"Error: \", error);\n            }\n        }\n        fetch(url)\n        .then(response => response.json())\n        .then(json => {\n            console.log('parsed json', json) // access json.body here\n            setPost(json[0]);\n            setPostId(PostId);\n        })\n    */\n    //if(post.blogImage == \"\") return null;//should fix the require function ./undefined error but didnt\n   \n    //console.log(post);\n\n  return(\n        //NOTICE: Replace the src = {} with a src = {require()}. Might cause problems while bundling. Still unresolved\n        <div className = \"blogPostContainer\">\n            <Card>\n\n                <div className = \"postImageContainer\">\n                    <img src = {postImage} alt = \"Post Image\" />\n                </div>        \n                <div className = \"blogHeader\">\n                    <h1 className = \"postTitle\">{post.title}</h1>\n                    <em className = \"postDescription\">{post.description}</em>\n                    <span className = 'postedBy'>posted on {post.date} by {post.author}</span>\n                </div>\n\n                <div className = 'postContent'>\n                    <ReactMarkdown>{postText}</ReactMarkdown>\n                </div>\n            </Card>\n        </div>\n\n\n   )\n\n }\n\nexport default BlogPost"]},"metadata":{},"sourceType":"module"}