{"ast":null,"code":"var _jsxFileName = \"/Users/keanewong/Desktop/Itadakimasu-Server/Itadakimasu/src/Container/PostList/PostList.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport Card from '../../Components/UI/Card';\nimport './style.css';\nimport PostCard from '../../Components/PostCard';\nimport { useState, useEffect, useRef } from 'react';\nimport { SizeMe } from 'react-sizeme';\nimport StackGrid, { transitions, easings } from \"react-stack-grid\";\nimport Loader from \"react-loader-spinner\";\nimport { async } from 'q';\nimport PageFooter from '../../Components/PageFooter';\n/**\n* @author\n* @function PostList\n**/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst imagesLoaded = require('imagesloaded');\n\nconst transition = transitions.scaleDown; //Notes; \n//Postlist will use useeffect to call fetch() on the express server which will then send data from x number of blogposts\n//which will contain title, breif description, and ID number for routing. These will then be passed to PostCard and used\n//to generate snippets of recipes that can be used to nav to the recipe.\n\nconst PostList = props => {\n  _s();\n\n  const [postData, setPostData] = useState([]);\n  const [imgsLoaded, setImgsLoaded] = useState(false);\n  useEffect(() => {\n    //code that gets every post's metadata\n    const url = \"/posts\";\n    fetch(url).then(response => response.json()).then(json => {\n      console.log(\"Yo what the up my goo\", json); //setting the postData to our result\n\n      setPostData(json);\n      Promise.all(json.map(async post => {\n        const imgUrl = `/postText/${post.image}`;\n        const response = await fetch(imgUrl);\n        const result = await response.blob();\n        console.log(\"result is \", result);\n        const imageObjectUrl = await URL.createObjectURL(result);\n        console.log(\"Image Object url: \", imageObjectUrl);\n        post.image = imageObjectUrl;\n      })).then(() => setImgsLoaded(true)).catch(err => console.log(\"Failed to load images\", err));\n    }).catch(err => console.log(\"Failed to load: \", err));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"PostList\",\n    children: [imgsLoaded ? /*#__PURE__*/_jsxDEV(StackGrid, {\n      monitorImagesLoaded: true,\n      columnWidth: 290,\n      duration: 900,\n      gutterWidth: 35,\n      gutterHeight: 15,\n      easing: easings.cubicOut,\n      appearDelay: 60,\n      appear: transition.appear,\n      appeared: transition.appeared,\n      enter: transition.enter,\n      entered: transition.entered,\n      leaved: transition.leaved,\n      children: postData.map(curPost => /*#__PURE__*/_jsxDEV(PostCard, {\n        title: curPost.title,\n        description: curPost.description,\n        tags: curPost.tags,\n        date: curPost.date,\n        id: curPost.id,\n        author: curPost.author,\n        imgsrc: curPost.image,\n        post_id: curPost.post_id\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loaderContainer\",\n        children: /*#__PURE__*/_jsxDEV(Loader, {\n          type: \"Circles\",\n          color: \"#00BFFF\",\n          height: 100,\n          width: 100\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"spacer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(PageFooter, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 9\n  }, this);\n};\n\n_s(PostList, \"+jsNi5kgGlccxhvfkA022KJzLvs=\");\n\n_c = PostList;\nexport default PostList;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostList\");","map":{"version":3,"sources":["/Users/keanewong/Desktop/Itadakimasu-Server/Itadakimasu/src/Container/PostList/PostList.js"],"names":["React","Card","PostCard","useState","useEffect","useRef","SizeMe","StackGrid","transitions","easings","Loader","async","PageFooter","imagesLoaded","require","transition","scaleDown","PostList","props","postData","setPostData","imgsLoaded","setImgsLoaded","url","fetch","then","response","json","console","log","Promise","all","map","post","imgUrl","image","result","blob","imageObjectUrl","URL","createObjectURL","catch","err","cubicOut","appear","appeared","enter","entered","leaved","curPost","title","description","tags","date","id","author","post_id"],"mappings":"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","sourcesContent":["import React from 'react'\nimport Card from '../../Components/UI/Card'\nimport './style.css'\nimport PostCard from '../../Components/PostCard'\nimport {useState, useEffect, useRef} from 'react' \nimport { SizeMe } from 'react-sizeme'\nimport StackGrid, { transitions, easings } from \"react-stack-grid\";\nimport Loader from \"react-loader-spinner\";\nimport { async } from 'q'\nimport PageFooter from '../../Components/PageFooter'\n\n/**\n* @author\n* @function PostList\n**/\n\nconst imagesLoaded = require('imagesloaded');\n\nconst transition = transitions.scaleDown;\n\n//Notes; \n//Postlist will use useeffect to call fetch() on the express server which will then send data from x number of blogposts\n//which will contain title, breif description, and ID number for routing. These will then be passed to PostCard and used\n//to generate snippets of recipes that can be used to nav to the recipe.\n\nconst PostList = (props) => {\n\n  const [postData, setPostData] = useState([]);\n  \n  const [imgsLoaded, setImgsLoaded] = useState(false);\n\n  useEffect(() => {\n    \n    //code that gets every post's metadata\n    const url = \"/posts\"\n    fetch(url)\n    .then(response=>response.json())\n    .then(json => {\n      console.log(\"Yo what the up my goo\", json);\n\n      //setting the postData to our result\n      setPostData(json);\n\n\n      Promise.all(json.map(async post =>{\n        const imgUrl = `/postText/${post.image}`\n        \n        const response = await fetch(imgUrl);\n        const result = await response.blob();\n        console.log(\"result is \", result);\n        const imageObjectUrl = await URL.createObjectURL(result);\n\n\n        console.log(\"Image Object url: \",imageObjectUrl);\n        post.image = imageObjectUrl;\n\n       \n\n      }) )\n      .then(() => setImgsLoaded(true))\n      .catch(err => console.log(\"Failed to load images\", err))\n\n      \n    })\n    .catch(err => console.log(\"Failed to load: \",err))\n    \n  }, []);\n\n  \n\n\n  return(\n\n        <div className = \"PostList\"  >\n      {imgsLoaded ? (\n          <StackGrid\n                monitorImagesLoaded = {true}\n                columnWidth={290}\n                duration={900}\n                gutterWidth={35}\n                gutterHeight={15}\n                easing={easings.cubicOut}\n                appearDelay={60}\n                appear={transition.appear}\n                appeared={transition.appeared}\n                enter={transition.enter}\n                entered={transition.entered}\n                leaved={transition.leaved}\n                \n          >\n          \n            {postData.map(curPost => ( \n                <PostCard\n                \n                title = {curPost.title}\n                description = {curPost.description}\n                tags =  {curPost.tags}\n                date = {curPost.date}\n                id = {curPost.id}\n                author = {curPost.author}\n                imgsrc = {curPost.image}\n                post_id = {curPost.post_id}\n              \n                />\n\n              )\n            )}\n        \n        </StackGrid>\n      ) : (\n        <React.Fragment>\n        <div className = 'loaderContainer'>\n        <Loader\n          type = \"Circles\"\n          color = \"#00BFFF\"\n          height={100} \n          width={100}\n        \n        \n        />\n        </div>\n        <div className = 'spacer'></div>\n        </React.Fragment>\n      )}\n      \n      <PageFooter/>\n        </div>\n\n    )\n  }\n\n \n\nexport default PostList"]},"metadata":{},"sourceType":"module"}