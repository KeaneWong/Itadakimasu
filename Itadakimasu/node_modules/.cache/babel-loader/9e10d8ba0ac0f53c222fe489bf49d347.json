{"ast":null,"code":"var _jsxFileName = \"/Users/keanewong/Desktop/Itadakimasu-Server/Itadakimasu/src/Components/BlogPost/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport './style.css';\nimport Card from '../UI/Card';\nimport Bepis from '../../blogPostImages/TacosBarbacoa.jpg';\nimport blogPost from '../../Data/blog.json';\nimport ReactMarkdown from 'react-markdown';\nimport marked from \"marked\";\nimport Loader from 'react-loader-spinner';\n/**\n* @author\n* @function BlogPost\n**/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst BlogPost = props => {\n  _s();\n\n  const [post, setPost] = useState({\n    post_id: \"\",\n    description: \"\",\n    title: \"\",\n    date: \"\",\n    author: \"\",\n    tags: \"\",\n    text: \"\",\n    image: \"\"\n  }); //these two variables are to be used in the program, while the corresponding functions are used in usestate and useeffect\n\n  const [postId, setPostId] = useState(\"\");\n  const [postText, setPostText] = useState();\n  const [postImage, setPostImage] = useState();\n  const [imgLoaded, setImgLoaded] = useState(false);\n  useEffect(() => {\n    //this gets the metadata for post\n    function GetMetadata() {\n      const PostId = props.match.params.postId; //props.match.params.postId is the /urltag that we add to the url after 'itadakimasu.me/post'\n      //match.params is the parts of the url that are dynamic i.e changing (denoted with a ':' in app.js as 'postId' for this website)\n      //this was passed to us as a prop by the parent, app.js\n      //const post = blogPost.data.find(post=>post.id==postId);\n\n      const url = `/posts/${PostId}`;\n      console.log(url);\n      fetch(url).then(response => response.json()).then(json => {\n        console.log('parsed json', json[0]); // access json.body here\n\n        setPost(json[0]);\n        setPostId(PostId);\n        return json;\n      }).then(json => {\n        const textUrl = `/postText/${json[0].text}`;\n        console.log(textUrl);\n        fetch(textUrl).then(res => {\n          return res.text();\n        }).then(result => {\n          //console.log(result);\n          setPostText(result);\n        }).catch(error => {\n          console.log(error);\n        });\n        const imgUrl = `/postText/${json[0].image}`;\n        console.log(imgUrl);\n        fetch(imgUrl).then(res => res.blob()).then(result => {\n          console.log(result);\n          const imageObjectURL = URL.createObjectURL(result);\n          setPostImage(imageObjectURL);\n          setImgLoaded(true);\n        }).catch(error => {\n          console.log(error);\n        }); //console.log(`ImgURL: ${imgUrl}`);\n      });\n    }\n\n    ;\n    GetMetadata();\n    /* function WaitOnMetadata() {\n         return Promise.all([GetMetadata()]);\n      };\n      WaitOnMetadata()\n     .then(([json]) => {\n         console.log(\"Step 2:\",json);\n         const textUrl = `http://localhost:5000/postText/${post.text}`;\n         fetch({textUrl})\n         .then((res) => res.json())\n         .then((result) => {\n             setPostText({result });\n         })\n     \n         console.log(`TextURL: ${textUrl}`);\n           const imgUrl = `http://localhost:5000/postText/${post.image}`;\n         fetch({imgUrl})\n         .then((res) => res.json())\n         .then((result) => {\n             setPostImage({result});\n         })\n         console.log(`ImgURL: ${imgUrl}`);\n         \n     })*/\n  }, []); //tells the useeffect to do its thing when post or the dynamic part of the url is updated\n\n  /*\n      const fetchData = async() =>{\n          try {\n            const response = await fetch(url);\n            const jsonPost = await response.json();\n            //console.log(\"Yo what is up my goo\", json);\n            setPost(jsonPost);      //on update to post or url, we set the current displayed post to be the post we found using the postid we got from the dynamic url\n            console.log(jsonPost);\n            setPostId(PostId);  //on update, we rewrite the postId value to be used later in the program.\n           }\n          catch(error){\n            console.log(\"Error: \", error);\n          }\n      }\n      fetch(url)\n      .then(response => response.json())\n      .then(json => {\n          console.log('parsed json', json) // access json.body here\n          setPost(json[0]);\n          setPostId(PostId);\n      })\n  */\n  //if(post.blogImage == \"\") return null;//should fix the require function ./undefined error but didnt\n  //console.log(post);\n\n  return (\n    /*#__PURE__*/\n    //NOTICE: Replace the src = {} with a src = {require()}. Might cause problems while bundling. Still unresolved\n    _jsxDEV(\"div\", {\n      className: \"blogPostContainer\",\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"postImageContainer\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: postImage,\n            alt: \"Post Image\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"blogHeader\",\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            className: \"postTitle\",\n            children: post.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"em\", {\n            className: \"postDescription\",\n            children: post.description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"postedBy\",\n            children: [\"posted on \", post.date, \" by \", post.author]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"postContent\",\n          children: /*#__PURE__*/_jsxDEV(ReactMarkdown, {\n            children: postText\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 9\n    }, this)\n  );\n};\n\n_s(BlogPost, \"KNt7MzzjLsjC5C/89DTCOxFvyQk=\");\n\n_c = BlogPost;\nexport default BlogPost;\n\nvar _c;\n\n$RefreshReg$(_c, \"BlogPost\");","map":{"version":3,"sources":["/Users/keanewong/Desktop/Itadakimasu-Server/Itadakimasu/src/Components/BlogPost/index.js"],"names":["React","useState","useEffect","Card","Bepis","blogPost","ReactMarkdown","marked","Loader","BlogPost","props","post","setPost","post_id","description","title","date","author","tags","text","image","postId","setPostId","postText","setPostText","postImage","setPostImage","imgLoaded","setImgLoaded","GetMetadata","PostId","match","params","url","console","log","fetch","then","response","json","textUrl","res","result","catch","error","imgUrl","blob","imageObjectURL","URL","createObjectURL"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react'\nimport './style.css'\nimport Card from '../UI/Card'\nimport Bepis from '../../blogPostImages/TacosBarbacoa.jpg'\nimport blogPost from '../../Data/blog.json'\nimport ReactMarkdown from 'react-markdown'\nimport marked from \"marked\";\nimport Loader from 'react-loader-spinner'\n/**\n* @author\n* @function BlogPost\n**/\n\n\n\nconst BlogPost = (props) => {\n\n\n\n\n    const[post, setPost] = useState({\n        post_id:\"\",\n        description:\"\",\n        title: \"\",\n        date: \"\",\n        author: \"\",\n        tags:\"\",\n        text: \"\",\n        image: \"\"\n    });//these two variables are to be used in the program, while the corresponding functions are used in usestate and useeffect\n    const[postId,setPostId] = useState(\"\");\n\n    const[postText,setPostText] = useState();\n    const[postImage,setPostImage] = useState();\n    const[imgLoaded,setImgLoaded] = useState(false);\n\n    \n    useEffect(() =>\n    {\n        //this gets the metadata for post\n        function GetMetadata(){\n            const PostId = props.match.params.postId;   //props.match.params.postId is the /urltag that we add to the url after 'itadakimasu.me/post'\n                                                        //match.params is the parts of the url that are dynamic i.e changing (denoted with a ':' in app.js as 'postId' for this website)\n                                                        //this was passed to us as a prop by the parent, app.js\n            //const post = blogPost.data.find(post=>post.id==postId);\n            const url = `/posts/${PostId}`;\n            console.log(url);\n            fetch(url)\n            .then(response => response.json())\n            .then(json => {\n                console.log('parsed json', json[0]) // access json.body here\n                setPost(json[0]);\n                setPostId(PostId);\n                return json;\n            })\n            .then((json) =>{\n                const textUrl = `/postText/${json[0].text}`;\n                console.log(textUrl);\n                fetch(textUrl)\n                .then(res=>{\n                    return res.text();\n                })\n                .then((result) => {\n                    //console.log(result);\n                    setPostText(result);\n                })\n                .catch((error) => {\n                    console.log( error );\n                });\n\n                const imgUrl = `/postText/${json[0].image}`;\n                console.log(imgUrl);\n                fetch(imgUrl)\n                .then((res) => res.blob())\n                .then((result) => {\n                    console.log(result);\n                    const imageObjectURL = URL.createObjectURL(result);\n\n                    setPostImage(imageObjectURL);\n                    setImgLoaded(true);\n                })\n                .catch((error) => {\n                    console.log( error );\n                })\n                //console.log(`ImgURL: ${imgUrl}`);\n            })\n            \n        };\n        GetMetadata();\n\n       /* function WaitOnMetadata() {\n            return Promise.all([GetMetadata()]);\n\n        };\n\n        WaitOnMetadata()\n        .then(([json]) => {\n            console.log(\"Step 2:\",json);\n            const textUrl = `http://localhost:5000/postText/${post.text}`;\n            fetch({textUrl})\n            .then((res) => res.json())\n            .then((result) => {\n                setPostText({result });\n            })\n        \n            console.log(`TextURL: ${textUrl}`);\n\n\n            const imgUrl = `http://localhost:5000/postText/${post.image}`;\n            fetch({imgUrl})\n            .then((res) => res.json())\n            .then((result) => {\n                setPostImage({result});\n            })\n            console.log(`ImgURL: ${imgUrl}`);\n            \n        })*/\n\n\n\n\n        \n       \n        \n\n    }, []);//tells the useeffect to do its thing when post or the dynamic part of the url is updated\n   \n\n\n    /*\n        const fetchData = async() =>{\n            try {\n              const response = await fetch(url);\n              const jsonPost = await response.json();\n              //console.log(\"Yo what is up my goo\", json);\n              setPost(jsonPost);      //on update to post or url, we set the current displayed post to be the post we found using the postid we got from the dynamic url\n              console.log(jsonPost);\n              setPostId(PostId);  //on update, we rewrite the postId value to be used later in the program.\n\n            }\n            catch(error){\n              console.log(\"Error: \", error);\n            }\n        }\n        fetch(url)\n        .then(response => response.json())\n        .then(json => {\n            console.log('parsed json', json) // access json.body here\n            setPost(json[0]);\n            setPostId(PostId);\n        })\n    */\n    //if(post.blogImage == \"\") return null;//should fix the require function ./undefined error but didnt\n   \n    //console.log(post);\n\n  return(\n        //NOTICE: Replace the src = {} with a src = {require()}. Might cause problems while bundling. Still unresolved\n        <div className = \"blogPostContainer\">\n            <Card>\n\n                <div className = \"postImageContainer\">\n                    <img src = {postImage} alt = \"Post Image\" />\n                </div>        \n                <div className = \"blogHeader\">\n                    <h1 className = \"postTitle\">{post.title}</h1>\n                    <em className = \"postDescription\">{post.description}</em>\n                    <span className = 'postedBy'>posted on {post.date} by {post.author}</span>\n                </div>\n\n                <div className = 'postContent'>\n                    <ReactMarkdown>{postText}</ReactMarkdown>\n                </div>\n            </Card>\n        </div>\n\n\n   )\n\n }\n\nexport default BlogPost"]},"metadata":{},"sourceType":"module"}