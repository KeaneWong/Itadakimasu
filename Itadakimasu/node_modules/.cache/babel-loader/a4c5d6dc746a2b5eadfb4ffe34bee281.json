{"ast":null,"code":"import _regeneratorRuntime from\"/Users/keanewong/Desktop/Itadakimasu-Server/Itadakimasu/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/keanewong/Desktop/Itadakimasu-Server/Itadakimasu/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/keanewong/Desktop/Itadakimasu-Server/Itadakimasu/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React from'react';import Card from'../../Components/UI/Card';import'./style.css';import PostCard from'../../Components/PostCard';import{useState,useEffect,useRef}from'react';import{SizeMe}from'react-sizeme';import StackGrid,{transitions,easings}from\"react-stack-grid\";import Loader from\"react-loader-spinner\";import{async}from'q';import PageFooter from'../../Components/PageFooter';/**\n* @author\n* @function PostList\n**/import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var imagesLoaded=require('imagesloaded');var transition=transitions.scaleDown;//Notes; \n//Postlist will use useeffect to call fetch() on the express server which will then send data from x number of blogposts\n//which will contain title, breif description, and ID number for routing. These will then be passed to PostCard and used\n//to generate snippets of recipes that can be used to nav to the recipe.\nvar PostList=function PostList(props){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),postData=_useState2[0],setPostData=_useState2[1];var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),imgsLoaded=_useState4[0],setImgsLoaded=_useState4[1];useEffect(function(){//code that gets every post's metadata\nvar url=\"/posts\";fetch(url).then(function(response){return response.json();}).then(function(json){console.log(\"Yo what the up my goo\",json);//setting the postData to our result\nsetPostData(json);Promise.all(json.map(/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(post){var imgUrl,response,result,imageObjectUrl;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:imgUrl=\"/postText/\".concat(post.image);_context.next=3;return fetch(imgUrl);case 3:response=_context.sent;_context.next=6;return response.blob();case 6:result=_context.sent;console.log(\"result is \",result);_context.next=10;return URL.createObjectURL(result);case 10:imageObjectUrl=_context.sent;console.log(\"Image Object url: \",imageObjectUrl);post.image=imageObjectUrl;case 13:case\"end\":return _context.stop();}}},_callee);}));return function(_x){return _ref.apply(this,arguments);};}())).then(function(){return setImgsLoaded(true);}).catch(function(err){return console.log(\"Failed to load images\",err);});}).catch(function(err){return console.log(\"Failed to load: \",err);});},[]);return/*#__PURE__*/_jsxs(\"div\",{className:\"PostList\",children:[imgsLoaded?/*#__PURE__*/_jsx(StackGrid,{monitorImagesLoaded:true,columnWidth:290,duration:900,gutterWidth:35,gutterHeight:15,easing:easings.cubicOut,appearDelay:60,appear:transition.appear,appeared:transition.appeared,enter:transition.enter,entered:transition.entered,leaved:transition.leaved,children:postData.map(function(curPost){return/*#__PURE__*/_jsx(PostCard,{title:curPost.title,description:curPost.description,tags:curPost.tags,date:curPost.date,id:curPost.id,author:curPost.author,imgsrc:curPost.image,post_id:curPost.post_id});})}):/*#__PURE__*/_jsxs(React.Fragment,{children:[/*#__PURE__*/_jsx(\"div\",{className:\"loaderContainer\",children:/*#__PURE__*/_jsx(Loader,{type:\"Circles\",color:\"#00BFFF\",height:100,width:100})}),/*#__PURE__*/_jsx(\"div\",{className:\"spacer\"})]}),/*#__PURE__*/_jsx(PageFooter,{})]});};export default PostList;","map":{"version":3,"sources":["/Users/keanewong/Desktop/Itadakimasu-Server/Itadakimasu/src/Container/PostList/PostList.js"],"names":["React","Card","PostCard","useState","useEffect","useRef","SizeMe","StackGrid","transitions","easings","Loader","async","PageFooter","imagesLoaded","require","transition","scaleDown","PostList","props","postData","setPostData","imgsLoaded","setImgsLoaded","url","fetch","then","response","json","console","log","Promise","all","map","post","imgUrl","image","blob","result","URL","createObjectURL","imageObjectUrl","catch","err","cubicOut","appear","appeared","enter","entered","leaved","curPost","title","description","tags","date","id","author","post_id"],"mappings":"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","sourcesContent":["import React from 'react'\nimport Card from '../../Components/UI/Card'\nimport './style.css'\nimport PostCard from '../../Components/PostCard'\nimport {useState, useEffect, useRef} from 'react' \nimport { SizeMe } from 'react-sizeme'\nimport StackGrid, { transitions, easings } from \"react-stack-grid\";\nimport Loader from \"react-loader-spinner\";\nimport { async } from 'q'\nimport PageFooter from '../../Components/PageFooter'\n\n/**\n* @author\n* @function PostList\n**/\n\nconst imagesLoaded = require('imagesloaded');\n\nconst transition = transitions.scaleDown;\n\n//Notes; \n//Postlist will use useeffect to call fetch() on the express server which will then send data from x number of blogposts\n//which will contain title, breif description, and ID number for routing. These will then be passed to PostCard and used\n//to generate snippets of recipes that can be used to nav to the recipe.\n\nconst PostList = (props) => {\n\n  const [postData, setPostData] = useState([]);\n  \n  const [imgsLoaded, setImgsLoaded] = useState(false);\n\n  useEffect(() => {\n    \n    //code that gets every post's metadata\n    const url = \"/posts\"\n    fetch(url)\n    .then(response=>response.json())\n    .then(json => {\n      console.log(\"Yo what the up my goo\", json);\n\n      //setting the postData to our result\n      setPostData(json);\n\n\n      Promise.all(json.map(async post =>{\n        const imgUrl = `/postText/${post.image}`\n        \n        const response = await fetch(imgUrl);\n        const result = await response.blob();\n        console.log(\"result is \", result);\n        const imageObjectUrl = await URL.createObjectURL(result);\n\n\n        console.log(\"Image Object url: \",imageObjectUrl);\n        post.image = imageObjectUrl;\n\n       \n\n      }) )\n      .then(() => setImgsLoaded(true))\n      .catch(err => console.log(\"Failed to load images\", err))\n\n      \n    })\n    .catch(err => console.log(\"Failed to load: \",err))\n    \n  }, []);\n\n  \n\n\n  return(\n\n        <div className = \"PostList\"  >\n      {imgsLoaded ? (\n          <StackGrid\n                monitorImagesLoaded = {true}\n                columnWidth={290}\n                duration={900}\n                gutterWidth={35}\n                gutterHeight={15}\n                easing={easings.cubicOut}\n                appearDelay={60}\n                appear={transition.appear}\n                appeared={transition.appeared}\n                enter={transition.enter}\n                entered={transition.entered}\n                leaved={transition.leaved}\n                \n          >\n          \n            {postData.map(curPost => ( \n                <PostCard\n                \n                title = {curPost.title}\n                description = {curPost.description}\n                tags =  {curPost.tags}\n                date = {curPost.date}\n                id = {curPost.id}\n                author = {curPost.author}\n                imgsrc = {curPost.image}\n                post_id = {curPost.post_id}\n              \n                />\n\n              )\n            )}\n        \n        </StackGrid>\n      ) : (\n        <React.Fragment>\n        <div className = 'loaderContainer'>\n        <Loader\n          type = \"Circles\"\n          color = \"#00BFFF\"\n          height={100} \n          width={100}\n        \n        \n        />\n        </div>\n        <div className = 'spacer'></div>\n        </React.Fragment>\n      )}\n      \n      <PageFooter/>\n        </div>\n\n    )\n  }\n\n \n\nexport default PostList"]},"metadata":{},"sourceType":"module"}